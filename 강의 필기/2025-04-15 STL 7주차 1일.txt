2025-04-15 STL 7주차 1일

stl이 무엇인지 소개
표준 템플릿 라이브러리! (STL)
소스코드가 공개되어 있는 라이브러리이다.

자료형과 무관한 클래스와 함수를 마음대로 만들 수 있다.
자료형관 무관한 클래스를 가지고 자료구조를 제공
자료형과 무관한 함수를 가지고 알고리즘을 제공

자료구조 + 알고리즘
+라는 것은 자료구조와 알고리즘을 각각 자료형에 따라 구현하려면
n^2을   2*n 인가 정확하지 않음 (다시 보기)

디자인 패턴을 문제를 해결하기 위한 방법
반복자 : 오리지널 디자인 패턴임! (구글에 검색하면 알수 있음
검색 :  iteraotr design pattern
	이게 왜 만들어졌는지, 어떻게 쓰는지
책 : design pattern gof (언어는 c++로 되어있음0
	23가지 패턴이 있음
	반복자 패턴일 풀고자하는 것이 무엇인지 찾아보자
	

용어 
generic Programming, Container, iteraotr, Algorithm(구분법 3가지
									1. 원소를 수정 x
									2. 원소를 수정 O
									3. 원소를 정렬하는 알고리즘
				> 실제 컨테이너를 말하는것 
				(가장 효율적 : 크기고 같게 넣는것)
Adaptor, 
(기존의 것을 변형시켜 새로운것을 만들어낸다.
기존의 컨테이너를 변형시켜 새로운 것을 만들어내는것
stack, queue이런 것은 Adaptor를 쓴다. 자료구조, +, 알고리즘을 어뎁테이닝해서 만들수 있음)
Predicates,(bool값을 리턴하는 )
Function Object(function cell object를 오버로딩한것? 다시 보기), Callable Types

Concepts (cpp20에서 새로)
(그동안 불편한것을 언어에서 제공하는 기능 만들면서 이야기 해볼것
		템플릿을 이용하면서 생기는 문제를 해결하기 윈한
		cpp26에서는 진짜 구현하고 싶던 내용을 구현한 
		contract support(함수가 실행되기 전, 실행된 후너가 갖추야할 조건을 기술할 수 있는 언어의 기능, 이런 내용이 말이 나온건 오래 됐는데 이제 구현된것이다.))

, Ranges, (라이브러리를 새로짰다.)
sort는 구닥다리 버전
신버전
ranges::sort(a, [] (const STRING& lhs, const STRING& rhs){
	return lhs.size() < rhs.size();
});
여기에컨샙이 어떻게 들어가는지?

Span
컨티구어스 메모리의 내용을 쉽게, 무겁지 않게 다루기 위한 도우미 클래스이다.
string_view와 같이 볼수 있는
다차원으로 볼수 있는 mdSpan? 이런 내용




STL
자료구조 				+ 		알고리즘
							(반대말은 해패로?)
contaniner라고 부른다.		-> 		homogeneous data type
짐을 가장 많이 실으려면			vector<int> v;




STL Compoenent
stl은 컴포넌트(컨테이너, 반복자. 알고리즘)간의 협력에

컨테이너 ---반복자---> 알고리즘 ------> 결과!
컨테이너 ---반복자--------^^
				      |
				호출가능한 타입(sort와 같은 것을 말하는거임)



컨테이너라는 것을 어떻게 구분하는 것이냐?

3가지로 구분함
1. stl sequence containers (원하는 곳에서 값을 접근할수 있는)
	컨티구어스 메모리 3가지가 보인다.
	덱은 가짜 컨티구어스 메모리 (그렇게 보이지만 실제 그렇게 되어있지 않음)
	array, vector, deque(데ㅋ 라고 읽는다.), forward_list, list

	array( 값을 제거할 수 없음)
	vector ( 오른 편으로 데이터를 동적으로 늘릴수 있는 자료구조)
	덱은 ( 앞, 뒤에서 값을 추가하기 쉬운 자료구조)
	forward_list ( 니가 손으로 한것보다 빠를껄?)
	list
	list는 왜 sequence
	
2. associative containers	(연관 컨테이너) 굳이 번역하면
	key, value가 연관 되어 있음 
	key값을 가지고 정렬상태를 유지하는
	key와 value가 같은 것은 set
	map == 딕셔너리와 같음
	set					map
	이 자료구조를 트리로 만들어라? 이런 소리 없음
	key값을 기준으로 정렬할 수 있어야해
	정렬하고 있는 이유는 (빨리 찾으려고 빨리 찾을 때 성능이 이정도 되어야해)
	구현을 어떻게 해야하는지 젹혀있지 않음
	이 자료구조가 어떻게 되어 있는지 관심 없음 얼마의 속도로 나오는지 관심

3. unorder associative containers (순서가 없는 !)
	어디에 저장될지 너도 모르고 나도 모르고
	값을 hash function에 넣어서 값을 찾는 것
	이 친구의 특징!
	가장 빨리 찾는다! -> 그렇게 하려면 메모리를 와장창 쓸수  밖에 없음
	unordered_set, unordered_map 등등
	
	



오늘의 주제
컨테이너가 무엇인가!

cpp reference를 보자	: https://en.cppreference.com/w/cpp/container

쉽게 구현할수 있게 우리가 알고있는 자료구조를 모아둔 집합을 컨테이너라고 부른다.
2가지로 그룹핑했었는데 이제 3개로 
위에서 봤던 3가지 

sequence containers
	inplace_vector, hive가 cpp26에 추가 되었다.


3가지 그룹은 서로 다른 동작들을 지원하려고 구분하였다.
1. 메모리르 공간을 지가 알아서 관리해 자료구조 속에 들어있는 원소를 어떻게 얼로케이션, 접근하기 위한 멤버 펑션도 제공 ㅇ그렇지 않으면 다른 메모리르 구조는 반복자를 통해서 해야함 
반복자는 클래스 오브젝트인데 특석이 포인터랑 비슷하다
대부부능이 컨테이너는 적어도 몇개의 맴버 함수를 공유한다.

컨테이너가 뭐야? cpp 표준 문서 기준! (액기스를 알려준다.!)


cpp n4917 검색하면 다운 가능	: https://isocpp.org/files/papers/N4917.pdf
Document Number : N4917 cpp 표준문서 

컨테이너란! : Containers are objects that store other objects. 	
		컨테이너는 객체야 다른 객체를 담을 수 있는 객체야!
		

뭘 의미하냐!
vector<int>	v;
v라는 오브젝트야!
typeif(v)하면 class로 나온다.
v가 담을 수 있는 오브젝트는 int이다. (다르 오브젝트로 담을 수 있다.)


표준컨테이너 요구 조건! (찾아보고! 표준문서에서




!!!1 array !!! : https://en.cppreference.com/w/cpp/container/array
template<
    class T,
    std::size_t N
> struct array;

array는 고정된 배열을 포장해놓은 클래스야!
이 컨테이너는 aggregate type이야! 
동일한 문법적인 의미를 가지고 있어 


표준에서 array를 읽는 것은 비추!
cppreference에서 보삼
언제 추천하냐 잠이 안와!



There is a special case for a zero-length array (N == 0).
 이 경우는 	In that case, array.begin() == array.end()

cout << "value 타입 - " << typeid(array<int, 0>::value_type).name() << endl;
value 타입 - int


Element access
이것이 내가 잘 봐야하는 부분
반복자와 관련된 부분이 가자 중요하네
Iterators





array를 쓰는 이유는 안전배열로 쓰려고 하는거야
array<int, 5> a{ 1,2,3,4,5 };	// int a[5]; 

for (int i = -10; i < 10; ++i) {
	cout << a[i] << endl;
}

근데 이 코드가 왜 돌아가니?????
array가 값의 범위를 넘었는데?
c++ 언어는 기본전제가 나를 이용해서 코딩하는 프로그래머는 메모리 귀신이라고 
생각하고 하는거구나
메모리를 마음대로 헤집고 다니고 싶구만
그래서 돌아가는거임 의도가 의도를 반영한거구나
니가 cpp코딩하면서 메모리 헤집고 다니는 코드가 기본인데
혹시라도 실수해서 


안전 배열로서 작동하는 at
a.at(num); 이렇게 하면 경계를 벗어나면 바로 날라감


try {
	a.at(num);
}
catch (std::exception& e) {
	cout << e.what() << endl;
	cout << "다시 입력해 " << endl;
	goto START;
}
이런 코드를 안쓰는 것이 중요!
cpp은 속도가 중요하다!
array에서 알아볼것은 이제 끝!



이
백터! vector<T> - dynamic(run-time) array	: 실행될때 크기가 변할 수 있는


vector<int> v{};		{} 기호는 initializer-list
vector<int> v (100);	() 원소 100개를 담는 


// v의 정체를 밝혀보세요.
cout << "v의 크기 - " << sizeof v << endl;
cout << "v의 주소 - " << addressof(v) << endl;
cout << "v의 타입 - " << typeid(v).name() << endl;

이와 같은 코드를 v의 정체를 밝힐 수 있다.





vector<int> v { 1,2,3 };			x64
						메모리 3칸
						1. 3개의 필드
						2. 지금 빈방없이 숫자가 꽉참 3
						3. int* p
						그중의 하나는 free store를 가르킨다.
						프리 스토어에서 	
						4크기의 	
						1 2 3 (3개 가지고 있음


push_back(4)를 하려면 -> 4개 들어갈 칸을 만들고 ( 깊은 복사를 하고, 4를 추가하고)
이러면 한번 이사하면 큰일 남!!!!!

그러면 어떻게 하냐
한번에 잡을때
미래를 대비해서 한 6개를 잡아
4
여유 공간은 2배로 하는것이 좋아(vs에서는 50퍼씩 올린다.)
1 2 3 5 10 이런식

vector
size			vs에서는 다른 방법으로 구현하긴함 근데 이렇게 이해해도 문제 없음
capcity
data



\




@
vector<int> v { 1,2,3 };

// 반복자를 사용하여 access
for (vector<int>::iterator i = v.begin(); i != v.end(); ++i)
	cout << *i << endl;


v한테 물어본다.  v 
				3
				3
				데이터 포인터  freestore의 1,2,3을 가르킨다.

1,2,3이라는 데이터를 누가 쓰냐? -> 알고리즘이 이해하는 거야
123중에 2라는 값이 있어?
access해서 읽고 쓰는 주체는 대부분  알고리즘이 될것이다.
알고리즘이 v[i]이렇게 접근 할수 있겠냐? -> nooo
왜 그러냐 알고리즘은 다 generic 하는데요!?
sort(T a, T b)
T가 vecter라는 것을 알수 없음
알고리즘은 반복자를 통해서 접근한다.
자료구조가 반복자를 주는 것이다.  v.begin() 내첫원소는 여기 있다?
다음 원소에 접근하려면? ++ 이렇게 하면 연산하면 되겠지?
마지막인지 확인하려면 end()로 확인하면 되겠지?
따라서 반복자를 써서 접근하는 것이 중요하다.



vector<int>::iterator i = v.begin();
이것은 
auto i = v.begin()

읽기만 할거면?
for (auto i = v.cbegin(); i != v.cend(); ++i)
	cout << *i << endl;
 auto가 자동으로 const 반복자가 되는 구나




