2025-05-13 STL 10주차 2일

STRING => STL Container


container
1. sequence
2.
3. 

2,3 은 반복자가 없으면 코딩 안될껄?


STRING은 string을 따라 만드는거라 
자원을 제공하는 반복자는 : 컨티구어스 한 메모리를 가리키는 반복자가 있으면 딱 맞겠다.


//
//////
STRING s{ "2025 5 13" };

cout << s << endl;

for (char c : s)
	cout << c << " ";
cout << endl;

범위기반의 for 문에 필요한 begin 함수를 찾을 수 없습니다.
range가 stl에서 중요한다.
나는 range를 알 수 없어서 이를 할 수가 없어

이 문장은 // syntactic sugar 이다.
이를 컴파일러가 변역한다면?

for (auto i = s.begin(); i != s.end(); ++i)
	cout << *i << " ";
 원래는 이렇게 써야하는데 간단하게 볼수 있도록 제공하는거임

이러면 데이터의 처음이 어디인지? 끝이 어디인지 코딩해야한다.





////////
STRING s{ "2025 5 13" };

관찰 해본다면?
stack			free-store
9글자				9
	------------>|'2''0' ---  |( end 위치 )
1번 객체

s야 begin이 어디니? 그러면 '2'의 위치를 알려줘야함
s.야 end는 어디니? 



////
이제 코딩해보자

클래스의 원소가 수정되나? id size, 포인터 p가 수정되지 않기 때문에 const

begin
return p.get();			// return &p[0]

end()
return p.get() + len;	// return &p[len]



///
iterator : https://en.cppreference.com/w/cpp/iterator
반복자의 정의 : Iterators are a generalization of pointers
반복자는 일반화한거야 포인터를 (일반화 -> 포인터보다 더 넓게 쓴다는거야 (구체적의 반대)) 
설명해보자면 할수있게 해주려고 cpp프로그램이 동작하게 해준다 뭐와 동작하려는 거냐면
니가짠 cpp 프로그램이 서로다른 자료구조들과 문제없이 작동하도록하는거야 자료구조는 container가 있고
ranges라는 자료구조도 있어 서로 다른 자료구조에도 도앚ㄱ하게 하는것 일관된 방식으로 
iterator traits, adaptors, and utility functions 이런것도 있어

자료가 막 바꿔도 맘대로 쓸 수 있어

반복자는 포인터의 동작을 추상화 한거야( 일반화랑 추상화가 비슷하다? )

대부분의 포인터구조를 쓸 수 있게 일반화
모든 함수 템플릿이 이터레이터를 쓸 수있게

/// iteraotr category cpp reference의 표


// 
추상화가 얼마나 강력하냐?
ex 모니터

반복자는 (iterator : 데이터 struct를 유니폼한 배너 도구)

모니터를 honmogeneous data 

iterator가 포인터를 일반화 해놓은 것이라면 (generalization of char*)
너는 포인터를 가지고 무슨 동작을 하니? -> access하려고

1. read access
2. write access

반복자를 p라고 하면 가르키는 값을 'A'라는 글자를 쓸 수 있다.
옆에 글자를 쓰려면 ++ p;	*p = b


// 코딩해보자


ostream_iterator : 출력을 돌아다니는 반복자 ( 모니터에 찍으려면 char단위로 움직여야한다.
ostream_iterator<char> p;	출력 스트림을 이터레이션 할 수 있는 객체야
	-> 단독으로 만들 수 없다 (생성할때 어떤 스트림을 가리킬건지 지정해줘야한다.)

{
	xxx() = delete;
}
되어 있어 위의 문장이 빨간줄

	ostream_iterator<char> p{ cout };
이와같이 해야한다.


	*p = 'A';
	++p;
	*p = 'B';
	++p;
	*p = 'C';
	++p;
	*p = '\n';
왜 이런 문장이 돌아가는거야?
	-> p.operaotr*()를 코딩해놔서 돌아가는거야
	p가 제공하는 연산자에 불과하다.

	p.operator*() = 'A';
	p.operator++();
	
실상은 멤버함수를 코딩한거구나

근데 ostream_iterator<char> p{ cout };는 매우 특별함
특성이 : 모니터에 A라고 찍었어 그러면 커서는 A뒤에 커서가 이동함 자동으로 전진함

전진동작을 안해도 글자는 찍힌다.

	p.operator*() = 'A';
	*p = 'B';
	*p = 'C';
	*p = '\n';
돌아감

그리고 읽기 동작을 안해서 

	p = 'A';
	p = 'B';
	p = 'C';
	p = '\n';

그래서 사실 
*p를 해도 뭔 일이 안일어나고
++p를 해도 안한다.


!!!!!!!!!!!!!!!!!!!!근데 저 *p와 ++p를 왜 했나?
이는 포인터를 일반화했기 했기때문에 이를 유니폼한 메너로 작성하는 것이다.
다른 자료구조야 그래도 그대로 돌아가기 때문이다!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


반복자는 이해가 어렵!



