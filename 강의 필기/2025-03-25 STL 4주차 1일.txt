2025-03-25 stl 4주 1일

주제 : !!!!동적할당과 smart pointer!!!!!

class Dog{
			->> ctrl + f5  			
}

								______________
							1	|stack		  |낮은
								|_____________|
								|		  |
							3	|free store     |
								|_____________|
								|		  |
							2	|초기화 x	  |  data
								|_______-_____  |
								|		  |높은




프로그램이 실행될때까지 알수 없는 경우 단 하나의 방법만 있다.


int* p = new int[num];			// free-store (달라는 형식에 맞춰 리턴된다.) (힙과 전혀 다름 힘은 void*를 리턴함)
							오해가능한데 os입장에선 똑같다.


생성될때 값을 생성하지 않으면 초기화가 아니죠



정수를 입력하세요: 15
1부터 15 까지 합계 - 120
정수를 입력하세요: 55
1부터 55 까지 합계 - 1540
정수를 입력하세요: 10
1부터 10 까지 합계 - 55
정수를 입력하세요: 100
1부터 100 까지 합계 - 5050
정수를 입력하세요: 1000
1부터 1000 까지 합계 - 500500
정수를 입력하세요: 10000
1부터 10000 까지 합계 - 50005000
정수를 입력하세요: 2100000000
1부터 2100000000 까지 합계 - -2142094720


int* p = new int[num];			// free-store 
메모리를 못주는 상황이 생김!!		->bad allocation

자원이 없어질경우를 대비
자원을 다시 쓰기


!!지적할만한것!!
long long sum{};
for (int i = 0; i < num; ++i)
	sum += p[i];


-> 이런코드 알고리즘에 있을텐데 내가 코딩할필요 없을텐데




헤더 numeric
auto sum = accumulate(p, p + num, 0); 이 알고리즘은 제너릭 알고리즘이다. 
						  0으로 하면 int 값으로
						  0LL longlong

다른 함수로는 병렬처리를 할 수 있다. (찾아보시오)



동적할당은 컴파일 타임에 결정된다.



------------------------------------------
동적할당의 문제는 뭘까


어떤 함수를 불렀어 
이 함수는 어떤 일이 일어난지 몰라
그리고 그 함수는 내가 만든 함수가 아닐 가능성이 높아
상황이 자원관리가 어떻게 되어있는지 알수가 없다.

대부분 함수는 예외를 던질 수 있음		
그래서 자원해제가 안되는 경우가 생길 수 있다. 

throw 20250325;

cout << "이 줄은 출력되면 되겠니?" << endl;
delete[] p;


noexcept을 불러서 예외를 못던지게 할 수 있다. 

실행시 검사하는 코드 잘 안씀 -> 속도에 영향


2번째 문제
---delete가 2번써짐 되돌린 자원을 또 돌려줌
	-> *p가 뎅글링 포인터가 된다. 

int* p = new int[10] {};

cout << "합계 - " << accumulate(p, p + 10, 0) << endl;

delete[] p;

// 시간이 얼마쯤 흐른 후 

delete[] p;


---> 아무런 증상 없이 죽음



RAII!!!!!!




class Dog {
public:
	Dog() { cout << "생성" << endl; }
	~Dog() { cout << "소멸" << endl; }
};

void f()
{
	Dog* p = new Dog;

	throw 1;

	delete p;
}

//--------
int main()
//--------
{
	try{
		f();
	}
	catch (...) {

	}
	
	save("메인.cpp");
}


Dog로 했더니 정상종료?????



p = new Dog; // 어사인먼트



이것이 RAII
	Dog* p{ new Dog };
이니셜라이제이션은 리소스를 에퀴시전하는것과 같다.

이제 일어나는게 중요

void f()
{
	Dog* p{ new Dog };

	throw 1;

	delete p;
}
보장사항
	지역 객체인 p를 무슨일이 일어나도 반드시 stack에서 제거된다. 
	stack에서 poping된다. 
	소멸됨을 반드시 보장
	소멸자가 반드시 호출됨을 보장
	(스텍 언와인딩)
	C++ stack-unwinding을 보장한다. 


class 스마트 {
	Dog* p;
public:
	스마트(Dog*) : p{ p } {
	}
	~스마트() {
		delete p;
	}
};


이제 스마트 포인터가 쓰임


생성
소멸
예외를 잡아 처리하였다.

스텍이 먼저 처리되고 


unique_ptr<Dog> p = make_unique<Dog>();

Dog 를 여러개 10개
unique_ptr<Dog[]> p = make_unique<Dog[]>(10);
		

RAII가 도대체 뭐야
	class로 자원을 관리하는거야
	class 생성될때 자원을 연결하는 거야
	확정제거, 소멸을 할 수 있다.
	자원, 리소스의 생명주기, 그 컨트롤러의 생명주기와 일치시킨다. 
	p가 제거 될때 make_unique<Dog[]>(10);이도 제거
	java는 이런걸 못함
	명쾌하게 설명하기 어렵



if (islower(c))
	c = toupper(c);			-> 		c = toupper(c); 이것만 써도 충분





---- stl에서 강조하는게 루프를 안쓰는겨

while (in >> c) {
	c = toupper(c);
	out << c;
}


--.>>>> 바꿔가 핵심! (변환!)


		
제네릭 함수인 이유 자료형, 동작이 자유롭다!
	transform(istreambuf_iterator<char>{in}, {},
		ostreambuf_iterator<char>{out},
		[](char c) {return toupper(c);});




다음시간 람다가 무엇인지
[](char c) {return toupper(c);






